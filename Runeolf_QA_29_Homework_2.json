{
	"info": {
		"_postman_id": "f7123b6b-8bbb-4369-aa9c-dff065ef0c64",
		"name": "Runeolf_QA_29_Homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что в body приходит правильный string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Runeolf",
							"disabled": true
						},
						{
							"key": "age",
							"value": "34",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json()                                   // Парсим body.\r",
							"\r",
							"let reqData = request.data;                                         // Получаем запрос.\r",
							"\r",
							"let reqSalary = Number(reqData.salary);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name s request\", function(){\r",
							"pm.expect(jsonData.name).to.equal(\"Runeolf\") \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что age в ответе равно age s request\", function(){\r",
							"pm.expect(jsonData.age).to.equal(\"34\") \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что salary в ответе равно salary s request\", function(){\r",
							"pm.expect(jsonData.salary).to.equal(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name s request\", function(){\r",
							"pm.expect(jsonData.name).to.equal(reqData.name)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что age в ответе равно age s request\", function(){\r",
							"pm.expect(jsonData.age).to.equal(reqData.age)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что salary в ответе равно salary s request\", function(){\r",
							"pm.expect(jsonData.salary).to.equal(reqSalary)\r",
							"});\r",
							"\r",
							"pm.test(\"Вывести в консоль параметр family из response\", function(){\r",
							"let family1 = _.map(jsonData.family);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить что u_salary_1_5_year в ответе равно salary*4\", function(){\r",
							"pm.expect(jsonData.family[\"u_salary_1_5_year\"]).to.equal(reqSalary * 4)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json()                                   // Парсим body.\r",
							"\r",
							"let jsonDataReq = pm.request.url.query.all();                       // Получаем запрос.\r",
							"let jsonDataReqSalary = Number(jsonDataReq[2].value)\r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name s request\", function(){\r",
							"pm.expect(jsonData.name).to.equal(jsonDataReq[0].value)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что age в ответе равно age s request\", function(){\r",
							"pm.expect(jsonData.age).to.equal(jsonDataReq[1].value)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что salary в ответе равно salary s request\", function(){\r",
							"pm.expect(jsonData.salary).to.equal(jsonDataReqSalary)\r",
							"});\r",
							"\r",
							"pm.test(\"Вывести в консоль параметр family из response\", function(){\r",
							"let family1 = _.map(jsonData.family);                \r",
							"console.log(family1);                               \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры name\", function(){\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"name\") \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры age\", function(){\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\") \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр name имеет значение Luky\", function(){\r",
							"pm.expect(jsonData.family.pets.dog.name).to.equal(\"Luky\") \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр age имеет значение 4\", function(){\r",
							"pm.expect(jsonData.family.pets.dog.age).to.equal(4) \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json()                               // Парсим body.\r",
							"let jsonDataReq = pm.request.url.query.all();                   // Получаем запрос.\r",
							"\r",
							"let checkAge = Number(jsonDataReq[1].value);                    // Приводим age из запроса к числу.\r",
							"let salary1 = Number(jsonDataReq[2].value)                      // Приводим salary к числу.\r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name s request\", function(){\r",
							"pm.expect(jsonData.name).to.eql(jsonDataReq[0].value)          \r",
							"});\r",
							"\r",
							"pm.test(\" Проверить, что age в ответе равно age из request\", function(){\r",
							"pm.expect(jsonData.age).to.equal(checkAge)                      \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Вывести в консоль параметр salary из request\", function(){\r",
							"console.log(jsonDataReq[2])                 \r",
							"});\r",
							"\r",
							"pm.test(\"Вывести в консоль параметр salary из response\", function(){\r",
							"console.log(jsonData.salary)                 \r",
							"});\r",
							"\r",
							"pm.test(\"Вывести в консоль 0-й элемент параметра salary из response\", function(){\r",
							"console.log(jsonData.salary[0])                \r",
							"});\r",
							"\r",
							"pm.test(\"Вывести в консоль 1-й элемент параметра salary параметр salary из response\", function(){\r",
							"console.log(jsonData.salary[1])              \r",
							"});\r",
							"\r",
							"pm.test(\"Вывести в консоль 2-й элемент параметра salary параметр salary из response\", function(){\r",
							"console.log(jsonData.salary[2])                \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что 0-й элемент параметра salary равен salary из request\", function(){\r",
							"pm.expect(jsonData.salary[0]).to.equal(salary1)                 \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что 1-й элемент параметра salary равен salary*2 из request\", function(){\r",
							"pm.expect(Number(jsonData.salary[1])).to.equal(salary1 * 2)     \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что 2-й элемент параметра salary равен salary*3 из request \", function(){\r",
							"pm.expect(Number(jsonData.salary[2])).to.equal(salary1 * 3)     \r",
							"});\r",
							"\r",
							"pm.test(\"Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\", function () {                        \r",
							"jsonData.salary.forEach((x) => {\r",
							"console.log(x)\r",
							"})\r",
							"   });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json()                            // Парсим ответ body.\r",
							"let reqData = request.data;                                  // Получаем запрос.\r",
							"let reqDataSalary = Number(reqData.salary);                  // Приводим \"salary\" к числу\r",
							"let reqDataAge = Number(reqData.age);                        // Приводим \"age\" к числу\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр start_qa_salary\", function(){\r",
							"pm.expect(jsonData).to.have.property(\"start_qa_salary\") \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_6_months\", function(){\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\") \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_12_months\", function(){\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\") \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_1.5_year\", function(){\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\") \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_3.5_years\", function(){\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\") \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр person\", function(){\r",
							"pm.expect(jsonData).to.have.property(\"person\") \r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр start_qa_salary равен salary из request\", function(){\r",
							"pm.expect(jsonData.start_qa_salary).to.equal(reqDataSalary)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_6_months равен salary*2 из request\", function(){\r",
							"pm.expect(jsonData.qa_salary_after_6_months).to.equal(reqDataSalary * 2)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request\", function(){\r",
							"pm.expect(jsonData.qa_salary_after_12_months).to.equal(reqDataSalary * 2.7)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request\", function(){\r",
							"pm.expect(jsonData['qa_salary_after_1.5_year']).to.equal(reqDataSalary * 3.3)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request\", function(){\r",
							"pm.expect(jsonData['qa_salary_after_3.5_years']).to.equal(reqDataSalary * 3.8)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что в параметре person, 1-й элемент из u_name равен salary из request\", function(){\r",
							"pm.expect(jsonData.person.u_name[1]).to.equal(reqDataSalary)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что что параметр u_age равен age из request\", function(){\r",
							"pm.expect(jsonData.person.u_name[2]).to.equal(reqDataAge)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр u_salary_5_years равен salary*4.2 из request\", function(){\r",
							"pm.expect(jsonData.person.u_salary_5_years).to.equal(reqDataSalary * 4.2)\r",
							"});\r",
							"\r",
							"pm.test(\"***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\", function () {   \r",
							"let obj = jsonData.person;\r",
							"for (let key in obj) {\r",
							"  if(obj.hasOwnProperty(key)){\r",
							"    console.log(`${key} : ${obj[key]}`)\r",
							"  }\r",
							"}\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
